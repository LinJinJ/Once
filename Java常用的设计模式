                                                Java常用的设计模式
      1.单例设计模式 www.cnblogs.com/yinxiaoqiexuxing/p/5605338.html
            所谓的单例设计模式简单说就是无论程序如何运行，采用单例设计模式的类（Singleton类）永远只会一个实例化对象产生。具体实现步骤如下：
                  （1）将采用单例设计模式的类的构造方法私有化（采用private修饰）（防止通过new实例化对象）
                  （2）在其内部产生该类的实例化对象，并将其封装成private static类型
                  （3）定义一个静态方法返回该类的实例
                  
                  示例代码如下：
                    public class Singleton{
                        private static Singleton instance = new Singleton();//在内部产生本类的实例化对象
                        
                        public static Singleton getInstance(){ //通过静态方法返回instance对象
                                return instance;
                        }
                        
                        private Singleton(){  //将构造方法封装私有化（防止通过new实例化对象）
                          
                        }
                        
                        public void print(){
                            System.out.println("Hello World!!!");
                        }
                    
                    }
                    
                    //客户端测试
                    public class SingletonDemo{
                        public static void main(String args[]){
                            Singleton s1 = null; //声明对象
                            Singleton s2 = null; //声明对象
                            Singleton s3 = null; //声明对象
                            
                            s1 = Singleton.getInstance(); //取得实例化对象
                            s2 = Singleton.getInstance(); //取得实例化对象
                            s3 = Singleton.getInstance(); //取得实例化对象
                            
                            s1.print();//调用方法
                            s2.print();//调用方法
                            s3.print();//调用方法
                            
                        }
                    
                    }
                    
                    
                    一、单例模式的介绍
                          基本概念：保证一各类仅有一个实例，并且提供一个访问它的全局访问点。
                    
                    二、单例模式的实现
                          
                          
                         方法一
                          /*
                            饿汉式：先创建实例化对象
                          */
                          public class SingletonTest{
                          
                              pravete static Singleton instance = new Singleton();//在内部对产生本类的实例对象
                          
                              private SingletonTest(){}  //构造函数私有化（防止通过new实例化对象）
                              
                              public static SingletonTest getInstance(){ //通过静态方法返回实例对象
                                  return instance;
                              }
                          }
                          /*
                            优点：线程安全（静态变量全局唯一）
                            缺点：效率低，当类SingletonTest被加载时，会初始化static的instance，静态变量被创建并分配内存空间
                                  从这以后，这个static的instance对象便一直占着这段内存（即便该变量没有被调用），当类被回收时，静态
                                  变量被摧毁，并释放所占有的内存，因此在某些特定条件下回耗费内存。
                          */  
                          
                          
                          方法二
                          /*
                            饱汉式、懒汉式：先不创建对象，等到调用了静态的对外方法才开始判断并创建对象
                          */
                          
                          public class SingletonTest{
                              
                              private static SingletonTest instance;//创建静态的变量，但不初始化
                              
                              private static  SingletonTest(){}  //创建私有化的构造函数（防止通过new实例化对象）
                              
                              public static SingletonTest getInstance(){ //定义对外的静态访问函数（在多线程下回出现重复访问）
                                    if(instance == null){  //判断对象是否被实例化
                                        instance = new SingletonTest();
                                    }       
                                    return instance;
                              }
                              
                          }
                          
                          /*
                              优点：效率高，当类SingletonTest被加载的时候，静态变量static的instance未被创建并分配内存空间，当getInstance方法
                                    第一次被调用时，初始化instance变量再分配内存，因此在某些特定条件下会节约了内存
                              缺点：非线程安全，并发环境下很可能出现多个SingletonTest实例
                          */
                          
                          方法三
                          /*
                            饱汉式的优化版本，增加了synchronized同步代码块，即添加了线程安全
                          */
                          public class SingletonTest{
                              
                               private static SingletonTest instance ;//定义静态变量，但不初始化
                               
                               private SingletonTest(){} //定义私有化的构造函数，防止被new关键字初始化
                               
                               public static SingletonTest getInstance(){ //对外提供访问的静态方法，初始化和调用
                                    if(instance == null){ //当访问时先进行判断再进入同步模块，如果instance != null时可以直接返回，
                                                            //不必进入同步代码块,避免线程拥堵 
                                        synchronized(SingletonTest.class){ //这里要传入的同步对象，在本类中可使用this
                                          //当进入了同步代码块再一次进行判断，保证多线程访问时对象在第一次创建，不会重复被创建
                                          if(instance == null){
                                             instance = new SingletonTest();
                                          }
                                        }
                                    }
                                    return instance;
                               }
                          }
                          
                          /*
                              优点：线程安全，效率高，在加载SingletonTest类时，SingletonTest变量声明但不初始化，也就不会占用到内存空间，在对外
                              静态方法中使用同步代码块可以避免线程安全问题
                          */
                  
                          
